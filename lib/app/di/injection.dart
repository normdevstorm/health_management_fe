// part of '../app.dart';
//This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';
import 'package:health_management/data/auth/api/authentication_api.dart';
import 'package:health_management/data/auth/repositories/authentication_repository_impl.dart';
import 'package:health_management/domain/login/usecases/authentication_usecase.dart';
import 'package:injectable/injectable.dart';
import 'package:logger/logger.dart';

import '../../domain/login/repositories/authentication_repository.dart';
import 'injection.config.dart';

final getIt = GetIt.instance;

@InjectableInit(
  initializerName: 'init',
  preferRelativeImports: true,
  asExtension: true,
  // TODO: refine generated dir later on
  // generateForDir:
)
void configureDependencies() {
  getIt.init();
  setUpNetworkComponent();
  setUpAppComponent();
}

void setUpNetworkComponent() {
  Dio dio = Dio(BaseOptions(
    baseUrl: "http://localhost:8080/api/v1/core",
    contentType: Headers.jsonContentType,
    headers: {
      HttpHeaders.accessControlAllowOriginHeader: "*",
      HttpHeaders.accessControlAllowMethodsHeader:
          "GET, POST, PUT, DELETE, OPTIONS",
    },
  ));
  getIt.registerLazySingleton(() =>
      AuthenticationApi(dio, baseUrl: "http://localhost:8080/api/v1/core"));
}

void setUpAppComponent() {
  getIt.registerFactory<Logger>(() => Logger());
  getIt.registerLazySingleton<AuthenticationRepository>(
      () => AuthenticationRepositoryImpl(getIt(), getIt()));
  getIt.registerLazySingleton(() => AuthenticationUsecase(getIt()));
}
